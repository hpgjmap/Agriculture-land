import{bb as p,e as m,F as s}from"./index-BC87Je4b.js";import{p as n}from"./MeshVertexAttributes-DKzmOopd.js";import{B as a}from"./vertexSpaceConversion-D6c3Aoxa.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-Djg3wOzR.js";import"./computeTranslationToOriginAndRotation-D7iIYv41.js";import"./projectPointToVector-C1x0U466.js";import"./meshVertexSpaceUtils-4FjScD9-.js";import"./MeshLocalVertexSpace-DGH_CVaj.js";import"./vec3-BT-1NoQD.js";import"./BufferView-Yzl5XXIu.js";import"./vec4-DHZ0lyMv.js";async function F(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{F as convertMeshVertexSpace};
