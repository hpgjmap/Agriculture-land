import{bh as p,e as m,Y as s}from"./index-BUPdcF-L.js";import{p as n}from"./MeshVertexAttributes-BZkSdv10.js";import{B as a}from"./vertexSpaceConversion-78P60g8j.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-DL25_OiA.js";import"./computeTranslationToOriginAndRotation-BuMz2Th2.js";import"./projectPointToVector-SvsFNKjY.js";import"./meshVertexSpaceUtils-DIdpFBGY.js";import"./MeshLocalVertexSpace-B1_vXcKz.js";import"./vec3-b4NBdQo9.js";import"./BufferView-sg4Nfbug.js";import"./vec4-Dldo3w-w.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
