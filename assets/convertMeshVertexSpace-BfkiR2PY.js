import{b2 as p,e as m,y as s}from"./index-CtmyMuv4.js";import{p as n}from"./MeshVertexAttributes-BnY9a_eZ.js";import{B as a}from"./vertexSpaceConversion-Dq7_lCIy.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-IsGYk4jN.js";import"./computeTranslationToOriginAndRotation-D7P1SyRi.js";import"./projectPointToVector-CX1pUUtd.js";import"./meshVertexSpaceUtils-D7aceX1j.js";import"./MeshLocalVertexSpace-CziFrLHY.js";import"./vec3-lY-EQ6AD.js";import"./BufferView-DzcDNb9a.js";import"./vec4-BkYEhnr2.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
