import{i2 as u,W as o,Q as l,cA as c,kl as a,km as m,kn as y,i4 as R}from"./index-CQBquChn.js";import{geodesicLength as f}from"./geometryEngine-CGiSmtFk.js";function b(n){return u(n)||o(n)}function p(n,e,r,...i){return u(n)?e.apply(void 0,i):o(n)?r.apply(void 0,i):null}function j(n){const{spatialReference:e}=n;return p(e,k,x,n)}function q(n,e){if(!l(n.spatialReference,e.spatialReference))return null;const{spatialReference:r}=n;return t[0]=n.x,t[1]=n.y,t[2]=n.hasZ?n.z:0,s[0]=e.x,s[1]=e.y,s[2]=e.hasZ?e.z:0,d(t,s,r)}function d(n,e,r){return p(r,h,g,n,e,r)}function h(n,e,r){return a(m(v,n,e,r).distance,"meters")}function g(n,e,r){return a(f($(n,e,r),"meters"),"meters")}function k(n){return a(R([n],"meters")[0],"meters")}function x(n){return a(f(n,"meters"),"meters")}function $(n,e,r){return{type:"polyline",spatialReference:r,paths:[[[...n],[...e]]]}}const v=new y,t=c(),s=c();export{b as e,q as f,j as m,p as r,d as u};
