import{al as s,am as o,hy as _,an as l,d4 as m,e as c,hw as g,b8 as f,bq as h,eI as v}from"./index-occlv2kq.js";import{n as S,d as C}from"./FeatureLayerView2D-C9jUeriQ.js";import"./EffectView-DMikg_jZ.js";import"./featureConversionUtils-RHjQWI3I.js";import"./OptimizedFeature-C_tWIfyu.js";import"./memoryEstimations-BOKhmi2n.js";import"./OptimizedGeometry-CjBBEGP9.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-BUTm6LBx.js";import"./AttributeBinsFeatureSet-BDzaX1r9.js";import"./AttributeBinsQuery-DdVMaPmV.js";import"./queryUtils-BOvS74-U.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-DovN33hR.js";import"./LayerView-CVvjf9SC.js";import"./Container-D_L2z-CJ.js";import"./layerViewUtils-B3GxKbLR.js";import"./TechniqueInstance-CbnnTWwr.js";import"./UpdateTracking2D-Clr9vXDH.js";import"./Utils-BZHqHZ7C.js";import"./BoundingBox-BVS6mmAT.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-CO39A6SG.js";import"./VertexArrayObject-BG_YOsRY.js";import"./TileContainer-CAlm-Wip.js";import"./WGLContainer-3BgMetCe.js";import"./ProgramTemplate-BZeAK40E.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BwjCAI7_.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-COAlgA0F.js";import"./CIMSymbolHelper-DYMZVHfw.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-CprKnufC.js";import"./GeometryUtils-DwKZSSX8.js";import"./rasterizingUtils-OfFRwl_W.js";import"./floatRGBA-Bk0JGNMV.js";import"./Rect-CUzevAry.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-CWAUi6sb.js";import"./ShaderBuilder-CyJ9BKkK.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CoND9_z9.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-D-8XyRr2.js";import"./constants-B4mRqufT.js";import"./parquet-fFKKDCx4.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-DedLeNpv.js";import"./RefreshableLayerView-DxnUv50s.js";const w=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let n=class extends w(C){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return S(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const u=h.fromJSON(y);return u.features.forEach(d=>{d.layer=this.layer,d.sourceLayer=this.layer}),u}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(v)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([l("esri.views.2d.layers.StreamLayerView2D")],n);const we=n;export{we as default};
