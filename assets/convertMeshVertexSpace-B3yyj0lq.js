import{b2 as p,e as m,y as s}from"./index-Bbz9ht2q.js";import{p as n}from"./MeshVertexAttributes-BN1El48_.js";import{B as a}from"./vertexSpaceConversion-CfGzN3uq.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BXKQ6wHq.js";import"./computeTranslationToOriginAndRotation-DMLKgZF6.js";import"./projectPointToVector-B0l022kK.js";import"./meshVertexSpaceUtils-oIZFIkyQ.js";import"./MeshLocalVertexSpace-Dh27TPDm.js";import"./vec3-Dxg_-6Ex.js";import"./BufferView-hPl2PJxt.js";import"./vec4-D_KRgoAa.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
