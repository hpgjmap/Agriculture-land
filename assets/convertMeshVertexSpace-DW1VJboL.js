import{b2 as p,e as m,y as s}from"./index-CQBquChn.js";import{p as n}from"./MeshVertexAttributes-CHuMAdxg.js";import{B as a}from"./vertexSpaceConversion-D53JYuWe.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-B97Aef9a.js";import"./computeTranslationToOriginAndRotation-5fhy8UiN.js";import"./projectPointToVector-SLdDIVN9.js";import"./meshVertexSpaceUtils-BzNVEd-n.js";import"./MeshLocalVertexSpace-DsbtfORu.js";import"./vec3--eE2yLJp.js";import"./BufferView-BPVfbirV.js";import"./vec4-BRSnRlZF.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
