import{W as _,e as C,aC as D,aD as tt,aE as q,aF as et,aG as H,Z as nt,aH as at,aI as st,aJ as it}from"./index-CNdw1GNh.js";function J(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),a=parseFloat(e[2]);return isNaN(c)||isNaN(a)?null:{a:c,f:a===0?0:1/a}}function G(t){const n=J(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function E(t,n,e){const{a:c,eSq:a}=G(e),s=Math.sqrt(a),i=Math.sin(n[1]*q),l=c*n[0]*q;let r;return a>0?r=c*((1-a)*(i/(1-a*(i*i))-1/(2*s)*Math.log((1-s*i)/(1+s*i))))*.5:r=c*i,t[0]=l,t[1]=r,t}function I(t){return _(t)&&!!J(t)}function lt(t,n="square-meters"){if(t.some(i=>!I(i.spatialReference)))throw new C("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:h,densificationRatio:u}=G(r),o=h*u;e.push(ht(l,o))}const c=[],a=[0,0],s=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let h=0;for(let u=0;u<l.length;u++){const o=l[u];E(a,o[0],r),E(s,o[o.length-1],r);let M=s[0]*a[1]-a[0]*s[1];for(let d=0;d<o.length-1;d++)E(a,o[d+1],r),E(s,o[d],r),M+=s[0]*a[1]-a[0]*s[1];h+=M}h=D(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new C("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!I(c.spatialReference)))throw new C("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const a=t[c],{spatialReference:s}=a,i=a.type==="polyline"?a.paths:a.rings;let l=0;for(let r=0;r<i.length;r++){const h=i[r];let u=0;for(let o=1;o<h.length;o++){const M=h[o-1][0],d=h[o][0],m=h[o-1][1],g=h[o][1];if(m!==g||M!==d){const p=new Z;B(p,[M,m],[d,g],s),u+=p.distance}}l+=u}l=D(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new C("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!I(e))throw new C("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,a=[],s=[0,0],i=new Z;for(const r of c){const h=[];a.push(h),h.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],d=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&d===o)continue;const g=[M,d];B(i,[M,d],[u,o],e);const{azimuth:p,distance:v}=i,w=v/n;if(w>1){for(let S=1;S<=w-1;S++)U(s,g,p,S*n,e),h.push(s.slice());U(s,g,p,(v+Math.floor(w-1)*n)/2,e),h.push(s.slice())}U(s,g,p,v,e),h.push(s.slice()),M=s[0],d=s[1]}}const l=at(H,e);return t.type==="polyline"?new st({paths:a,spatialReference:l}):new it({rings:a,spatialReference:l})}class Z{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function U(t,n,e,c,a){const s=n[0],i=n[1],l=s*q,r=i*q,h=(e??0)*q,{a:u,b:o,f:M}=G(a),d=Math.sin(h),m=Math.cos(h),g=(1-M)*Math.tan(r),p=1/Math.sqrt(1+g*g),v=g*p,w=Math.atan2(g,m),S=p*d,j=S*S,z=1-j,f=z*(u*u-o*o)/(o*o),k=1+f/16384*(4096+f*(f*(320-175*f)-768)),x=f/1024*(256+f*(f*(74-47*f)-128));let R,A,y,b=c/(o*k),P=2*Math.PI;for(;Math.abs(b-P)>1e-12;)y=Math.cos(2*w+b),R=Math.sin(b),A=Math.cos(b),P=b,b=c/(o*k)+x*R*(y+x/4*(A*(2*y*y-1)-x/6*y*(4*R*R-3)*(4*y*y-3)));const N=v*R-p*A*m,$=Math.atan2(v*A+p*R*m,(1-M)*Math.sqrt(j+N*N)),F=M/16*z*(4+M*(4-3*z)),O=Math.atan2(R*d,p*A-v*R*m)-(1-F)*M*S*(b+F*R*(y+F*A*(2*y*y-1)));return t[0]=(l+O)/q,t[1]=$/q,t}function B(t,n,e,c){const a=n[0]*q,s=n[1]*q,i=e[0]*q,l=e[1]*q,{a:r,b:h,f:u,radius:o}=G(c),M=i-a,d=Math.atan((1-u)*Math.tan(s)),m=Math.atan((1-u)*Math.tan(l)),g=Math.sin(d),p=Math.cos(d),v=Math.sin(m),w=Math.cos(m);let S,j,z,f,k,x,R,A,y,b,P=1e3,N=M;do{if(R=Math.sin(N),A=Math.cos(N),z=Math.sqrt(w*R*(w*R)+(p*v-g*w*A)*(p*v-g*w*A)),z===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;k=g*v+p*w*A,x=Math.atan2(z,k),y=p*w*R/z,j=1-y*y,f=k-2*g*v/j,isNaN(f)&&(f=0),b=u/16*j*(4+u*(4-3*j)),S=N,N=M+(1-b)*u*y*(x+b*z*(f+b*k*(2*f*f-1)))}while(Math.abs(N-S)>1e-12&&--P>0);if(P===0){const Q=o,T=Math.acos(Math.sin(s)*Math.sin(l)+Math.cos(s)*Math.cos(l)*Math.cos(i-a))*Q,W=i-a,V=Math.sin(W)*Math.cos(l),X=Math.cos(s)*Math.sin(l)-Math.sin(s)*Math.cos(l)*Math.cos(W),Y=Math.atan2(V,X);return t.azimuth=Y/q,t.distance=T,t.reverseAzimuth=void 0,t}const $=j*(r*r-h*h)/(h*h),F=$/1024*(256+$*($*(74-47*$)-128)),O=h*(1+$/16384*(4096+$*($*(320-175*$)-768)))*(x-F*z*(f+F/4*(k*(2*f*f-1)-F/6*f*(4*z*z-3)*(4*f*f-3)))),K=Math.atan2(w*Math.sin(N),p*v-g*w*Math.cos(N)),L=Math.atan2(p*Math.sin(N),p*v*Math.cos(N)-g*w);return t.azimuth=K/q,t.distance=O,t.reverseAzimuth=L/q,t}function ft(t){return I(t)?t:nt(t)?H.WGS84:null}export{ft as N,ut as R,Z as b,U as j,B as q,lt as v,I as y};
