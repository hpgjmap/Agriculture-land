import{b2 as p,e as m,y as s}from"./index-YH06oXPr.js";import{p as n}from"./MeshVertexAttributes-DOM5e0BM.js";import{B as a}from"./vertexSpaceConversion-msa79y0d.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BXq6fDdN.js";import"./computeTranslationToOriginAndRotation-B9BxTbVl.js";import"./projectPointToVector-BcAaEAIm.js";import"./meshVertexSpaceUtils-D5l9Bpwk.js";import"./MeshLocalVertexSpace-AmUT2ax0.js";import"./vec3-ApQ51syX.js";import"./BufferView-C5GFxdZW.js";import"./vec4-cU0NS0Qf.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
