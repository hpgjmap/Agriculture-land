import{aI as d,fv as n,de as f,a8 as s,a9 as i,aY as h,aa as S,bt as g,eA as y,eB as R,P as w,iX as v}from"./index-CQBquChn.js";let e=class extends d{constructor(o){super(o),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const o=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:f(t),geometries:o}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],e.prototype,"geometries",void 0),s([i({type:h,json:{read:{source:"outSR"}}})],e.prototype,"outSpatialReference",void 0),s([i()],e.prototype,"transformation",void 0),s([i()],e.prototype,"transformForward",void 0),e=s([S("esri.rest.support.ProjectParameters")],e);const $=e,j=g($);async function J(o,t,r){t=j(t);const a=y(o),p={...a.query,f:"json",...t.toJSON()},m=t.outSpatialReference,c=f(t.geometries[0]),u=R(p,r);return w(a.path+"/project",u).then(({data:{geometries:l}})=>v(l,c,m))}export{$ as m,J as n};
