import{bb as p,e as m,F as s}from"./index-CNdw1GNh.js";import{p as n}from"./MeshVertexAttributes-BuiwpVcK.js";import{B as a}from"./vertexSpaceConversion-DZbuYX8D.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BI7oFwKD.js";import"./computeTranslationToOriginAndRotation-DSAtJtPD.js";import"./projectPointToVector-D2EjXme3.js";import"./meshVertexSpaceUtils-DcVfq0P_.js";import"./MeshLocalVertexSpace-DT_hpwMc.js";import"./vec3-DQqpXr1U.js";import"./BufferView-DI-P8kcq.js";import"./vec4-BXIdbzfz.js";async function F(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{F as convertMeshVertexSpace};
