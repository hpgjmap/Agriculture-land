import{F as s,G as o,g$ as _,H as l,bA as u,e as c,gZ as g,v as f,bC as h,dS as v}from"./index-Bf8pDHYn.js";import{n as S,d as C}from"./FeatureLayerView2D-CglDI2DS.js";import"./EffectView-Dy23aLZX.js";import"./featureConversionUtils-B6lA2kA7.js";import"./timeSupport-aWDNuepF.js";import"./AttributeBinsFeatureSet-CicnXhzh.js";import"./AttributeBinsQuery-C4gbvf4H.js";import"./queryUtils-B_jmRG-W.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-DMlgsDsP.js";import"./LayerView-CjxR6Oq2.js";import"./Container-DARcBFHm.js";import"./TechniqueInstance-CO8-vj18.js";import"./UpdateTracking2D-DlwB-_P4.js";import"./Utils-D2POqbXd.js";import"./BoundingBox-3NZ0FntG.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-Co6WH_SH.js";import"./VertexArrayObject-DXqQ6LBU.js";import"./TileContainer-ichebSa7.js";import"./WGLContainer-DGj_KB3-.js";import"./ProgramTemplate-ieDxAtMo.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-_lEFRWJw.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-uv8-rmsp.js";import"./CIMSymbolHelper-Wi7NZvOy.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-r8C4xRGy.js";import"./GeometryUtils-D_kKh68l.js";import"./rasterizingUtils-B1zX-qy3.js";import"./floatRGBA-DPjSmTGI.js";import"./Rect-CUzevAry.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-DQ0edXDh.js";import"./ShaderBuilder-CwgiUiJx.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-DXHBlik_.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-oP-hzPnl.js";import"./constants-B4mRqufT.js";import"./parquet-CRkTzqdm.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-BrOQvZSP.js";import"./RefreshableLayerView-Dk-YiKPO.js";const P=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let n=class extends P(C){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return S(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const m=h.fromJSON(y);return m.features.forEach(d=>{d.layer=this.layer,d.sourceLayer=this.layer}),m}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(v)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([l("esri.views.2d.layers.StreamLayerView2D")],n);const ge=n;export{ge as default};
