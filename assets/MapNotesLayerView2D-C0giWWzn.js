import{B as u,A as f,bD as w,aR as g,bv as a,bw as o,bh as y,a8 as _,aa as V}from"./index-CQBquChn.js";import{S as v,y as b}from"./LayerView-tN1ACaeJ.js";import{t as c}from"./GraphicContainer-rTm5WuUT.js";import{A as d}from"./GraphicsView2D-Cl1LT1d-.js";import"./Container-t6CJU9It.js";import"./EffectView-C4QayK5t.js";import"./AGraphicContainer-BCMrGUzP.js";import"./TechniqueInstance-DJPbnmcY.js";import"./UpdateTracking2D-CSkeE7b-.js";import"./Utils-B24S_mhR.js";import"./BoundingBox-l4lKstwB.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-XM1lxQRq.js";import"./VertexArrayObject-BBrquz0v.js";import"./TileContainer-D-Dk03iL.js";import"./WGLContainer-FqDykAs3.js";import"./ProgramTemplate-Bi1KpApN.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-DmPsGYa8.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-DJbxJgWI.js";import"./FeatureCommandQueue-BhXv1kFh.js";import"./CIMSymbolHelper-BzRRfUR5.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-5eFu6V3j.js";import"./GeometryUtils-DpwsxMv_.js";import"./rasterizingUtils-KlqFLBu3.js";import"./floatRGBA-DZOhmjuS.js";import"./Rect-CUzevAry.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-CfHL5KOS.js";import"./ShaderBuilder-CSaJPZJV.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-kYg5B0X3.js";import"./OverrideHelper-DEkXd_Gm.js";import"./quantizationUtils-CyoGD1Dw.js";import"./AttributeStore-DeTJnARe.js";import"./queryUtils-Bx3G0Dfp.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DkqFKFbQ.js";import"./mat3f64-q3fE-ZOt.js";import"./normalizeUtilsSync-D4l9qU2s.js";import"./dehydratedFeatures-Bn8sUU1Q.js";const m="sublayers",l="layerView",C=new Set(["default"]);let n=class extends v(b){constructor(){super(...arguments),this._highlightIds=new Map}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,e){return Array.from(this.graphicsViews(),t=>{const s=t.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const h=this._graphicsViewsFeatureCollectionMap.get(t);for(const r of s)!r.popupTemplate&&h.popupTemplate&&(r.popupTemplate=h.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(t=>({type:"graphic",graphic:t,layer:this.layer,mapPoint:i}))}highlight(i,e="default"){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):f.isCollection(i)&&(t=i.map(h=>h&&h.uid).toArray());const s=t==null?void 0:t.filter(w);return s!=null&&s.length?(this._addHighlight(s),g(()=>this._removeHighlight(s))):g()}update(i){for(const e of this.graphicsViews())e.processUpdate(i)}attach(){const i=this.view,e=()=>this.requestUpdate(),t=this.layer.featureCollections;if(t!=null&&t.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of t){const h=new c(this.view.featuresTilingScheme),r=new d({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:e,container:h});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([a(()=>s.visible,p=>r.container.visible=p,o),a(()=>r.updating,()=>this.notifyChange("updating"),o)],l)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),m)}detach(){this._destroyGraphicsViews(),this.removeHandles(m)}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],e=this.view,t=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new c(this.view.featuresTilingScheme);h.fadeTransitionEnabled=!0;const r=new d({view:e,graphics:s.graphics,requestUpdateCallback:t,container:h});this.addHandles([s.on("graphic-update",r.graphicUpdateHandler),a(()=>s.visible,p=>r.container.visible=p,o),a(()=>r.updating,()=>this.notifyChange("updating"),o)],l),this.container.addChild(r.container),i.push(r)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e);this._highlightIds.set(e,t+1)}else this._highlightIds.set(e,1);this._updateHighlight()}_removeHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e)-1;t===0?this._highlightIds.delete(e):this._highlightIds.set(e,t)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys()),e=this._getHighlightBits(C.values());for(const t of this.graphicsViews())t.setHighlight(i.map(s=>({objectId:s,highlightFlags:e})))}};n=_([V("esri.views.2d.layers.MapNotesLayerView2D")],n);const ui=n;export{ui as default};
